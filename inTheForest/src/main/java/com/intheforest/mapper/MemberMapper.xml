<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.intheforest.mapper.MemberMapper">

<!-- 회원목록 출력 -->
<select id="listMember" resultType="member" parameterType="search">
  select b.*
  from   (select rownum rn, a.*
          from   (select *
                  from   member
                  <!-- 검색 키워드가 있으면 where 태그 생성 -->
				  			  <where>
					  		  		<choose>
				                  <when test="searchCondition == 'id'">
				                      <!-- ||: 문자열을 연결하는 연산자 -->
				                      member_id like '%' || #{keyword} || '%'
				                  </when>
				                  <when test="searchCondition == 'name'">
  				                    member_name like '%' || #{keyword} || '%'
	  			                </when>
		  		                <when test="searchCondition == 'address'">
			  	                    address like '%' || #{keyword} || '%'
				                  </when>
				                  <when test="searchCondition == 'email'">
				                      email like '%' || #{keyword} || '%'
				                  </when>	
				                  <when test="searchCondition == 'tel'">
				                      tel like '%' || #{keyword} || '%'
				                  </when>	
				                  <when test="searchCondition == 'permission'">
				                      permission = #{keyword}
				                  </when>	
				                  <!-- joined_date로 검색조건 넣는 건 추후에... -->
						  	  		</choose>
				  			  </where>
  		  					order by joined_date desc
  			  				) a
			  	) b
  where b.rn > (#{currentPage} - 1) * 10
  <!-- CDATA: 꺽쇠를 태그 아닌 연산자로 사용 -->
  <![CDATA[ and b.rn <= (#{currentPage} * 10) ]]>
</select>

<!-- 페이징을 위한 totalCount -->
<select id="totalCount" resultType="int">
	select count(1)
	from   member
</select>

<!-- 로그인 -->
<select id="loginMember" resultType="member">
	select *
	from member
	where member_id =#{memberId}
	and   password =#{password}
</select>

<!-- 회원 추가  -->
<insert id="insertMember" parameterType ="member">
insert into member (member_id
                    ,password
                    ,member_name
                    ,tel
                    ,email
                    ,address)
values (#{memberId}
      ,#{password}
      ,#{memberName}
      ,#{tel}
      ,#{email}
      ,#{address})
                    
</insert>

<!-- 아이디체크 (이름.이메일 받음)-->
<select id="findMemberId" resultType="member">
select member_id
from member
where member_name=#{memberName}
and   email= #{email} 
</select>


<!--    아이디로 회원 정보 가져오기-->
    <select id="searchMember" resultType="member" parameterType ="string">
        select *
        from member
        where member_id =#{memberId}
    </select>
 
 <!-- 비밀번호체크하기 -->
	 <select id="pwCheck" parameterType ="member">
	 select count(*)
	 from member 
	 where member_id=#{memberId}
	 and   member_name=#{memberName}
	 and   email=#{email}
	 </select>
<!-- 임시비밀번호 저장하기 -->
	<update id="pwUpdate">
	update member
	set password = #{password}
	where member_id=#{memberId}
	and   member_name=#{memberName}
	and   email=#{email}
	</update>

<!-- 아이디 중복 체크 -->
	<select id="checkId" parameterType ="String" resultType="int">
	select count(*)
	 from member 
	 where member_id=#{memberId}
	</select>

<!-- 회원정보수정 -->
	<update id="updateJoin" parameterType ="member">
	update member
	set
	 <if test= "password != null">
	  password = #{password}
	 </if>  
	 <if test= "email != null">
	 ,email =#{email}
	 </if>
     <if test= "tel != null">
     ,tel = #{tel}
     </if>
     <if test= "address != null">
     ,address = #{address}
     </if>
	 where member_id=#{memberId} 
	</update>

</mapper>