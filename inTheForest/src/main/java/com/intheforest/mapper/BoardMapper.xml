<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.intheforest.mapper.BoardMapper">

    <select id="boardList" resultType="board">
        select board_no,
        board_category,
        book_no,
        reply_no,
        secret_flag,
        title,
        content,
        board_pw,
        notice_flag,
        board_file,
        writer,
        view_cnt,
        write_date
        from board
        order by
        write_date desc
    </select>

		<!-- 답글(꼬리글) 구현하기 위해, 계층형 쿼리 이용 -->
    <select id="boardListByPage" resultType="board" parameterType="search">
    		select b.*
				from   (select rownum rn, a.*
          			from   (SELECT *
                    		FROM   board START WITH 0 = 0 <!-- 계층형 쿼리의 시작점(답글이 없어도 조회되도록, 항상 참인 조건으로 설정) -->
                    		AND   (lower(board_category) = lower(#{category}) 
	        	      			<choose>
						                <when test="searchCondition == 'title'">
						                    AND title like '%' || #{keyword} || '%'
						                </when>
						                <when test="searchCondition == 'writer'">
						                    AND writer like '%' || #{keyword} || '%'
						                </when>
						                <when test="searchCondition == 'titleAndWriter'">
						                    AND ((title like '%' || #{keyword} || '%')
						                         OR (writer like '%' || #{keyword} || '%'))
						                </when>
						            </choose>
	        	      			)
	        							OR notice_flag = 1 <!-- 중요 공지는 항상 선택되도록 -->
                    		CONNECT BY PRIOR board_no = reply_no <!-- board_no(부모글) 밑에 자식글(답글) 오도록 -->
                    		ORDER SIBLINGS BY notice_flag DESC, write_date DESC) a) b <!-- 같은 계층의 정렬조건 -->
				WHERE b.rn > (#{currentPage} - 1) * 10
        <![CDATA[
          AND b.rn <= (#{currentPage} * 10)
        ]]>
    </select>


    <select id="boardTotalCount" resultType="int"
            parameterType="search">
				SELECT count(1)
     		FROM   board START WITH 0 = 0
     		AND   (lower(board_category) = lower(#{category})
 				<choose>
       		<when test="searchCondition == 'title'">
           AND title like '%' || #{keyword} || '%'
       		</when>
       		<when test="searchCondition == 'writer'">
           AND writer like '%' || #{keyword} || '%'
       		</when>
       		<when test="searchCondition == 'titleAndWriter'">
           AND ((title like '%' || #{keyword} || '%')
                OR (writer like '%' || #{keyword} || '%'))
       		</when>
   			</choose>
 				)
				OR notice_flag = 1
     		CONNECT BY PRIOR board_no = reply_no
    </select>

    <insert id="insertBoard" parameterType="board" useGeneratedKeys="true" keyProperty="boardNo">
        <selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
            SELECT board_seq.nextval FROM dual
        </selectKey>
        insert into
        board(board_no, board_category, book_no, secret_flag, title, content, board_pw, notice_flag, writer, board_file)
        values(#{boardNo},
        #{boardCategory}, #{bookNo}, #{secretFlag}, #{title}, #{content}, #{boardPw}, #{noticeFlag}, #{writer},
        #{boardFile})
    </insert>

    <update id="updateBoard" parameterType="board">
        update board
        set write_date = sysdate
        <if test="title != null">
            ,title = #{title}
        </if>
        <if test="content != null">
            ,content = #{content}
        </if>
        <if test="secretFlag != null">
            ,secret_flag = #{secretFlag}
        </if>
        <if test="boardFile != null">
            ,board_file = #{boardFile}
        </if>
        <if test="boardFile == null">
            ,board_file = null
        </if>
        <if test="noticeFlag != null">
            ,notice_flag = #{noticeFlag}
        </if>
        <if test="boardCategory != null">
            ,board_category = #{boardCategory}
        </if>
        <if test="bookNo != null">
            ,book_no = #{bookNo}
        </if>
        <if test="replyNo != null">
            ,reply_no = #{replyNo}
        </if>
        <if test="boardPw != null">
            ,board_pw = #{boardPw}
        </if>
        <if test="writer != null">
            ,writer = #{writer}
        </if>
        where board_no = #{boardNo}

    </update>

    <update id="updateReplyNo" parameterType="board">
        update board
        set reply_no = #{replyNo}
        where board_no = #{boardNo}

    </update>

    <update id="updateCount" parameterType="int">
        update board
        set
        view_cnt = view_cnt + 1
        where board_no = #{boardNo}
    </update>

    <delete id="deleteBoard" parameterType="int">
        delete from board
        where board_no = #{boardNo}
    </delete>

    <select id="selectBoard" parameterType="int">
        select *
        from board
        where
        board_no = #{boardNo}
    </select>

    <select id="selectPrevBoard" parameterType="board">
        select *
        from board
        where write_date = (
        select max(write_date)
        from board
        <![CDATA[
        where write_date < TO_DATE(#{writeDate}, 'YYYY-MM-DD HH24:MI:SS')
        )
        and write_date < TO_DATE(#{writeDate}, 'YYYY-MM-DD HH24:MI:SS')
        ]]>
        <choose>
            <when test="boardCategory == 'qna' || boardCategory == 'reply'">
                and lower(board_category) in ('qna', 'reply')
            </when>
            <when test="!(boardCategory == 'qna' || boardCategory == 'reply')">
                and lower(board_category) = lower(#{boardCategory})
            </when>
        </choose>

        order by write_date desc
    </select>


    <select id="selectNextBoard" parameterType="board">
        select *
        from board
        where write_date = (
        select min(write_date)
        from board
        <![CDATA[
        where write_date > TO_DATE(#{writeDate}, 'YYYY-MM-DD HH24:MI:SS')
        )
        and write_date > TO_DATE(#{writeDate}, 'YYYY-MM-DD HH24:MI:SS')
        ]]>
        <choose>
            <when test="boardCategory == 'qna' || boardCategory == 'reply'">
                and lower(board_category) in ('qna', 'reply')
            </when>
            <when test="!(boardCategory == 'qna' || boardCategory == 'reply')">
                and lower(board_category) = lower(#{boardCategory})
            </when>
        </choose>

        order by write_date desc
    </select>


    <select id="getBookNoByMemberId" parameterType="string">
        select book_no
        from site_book
        where member_id = #{memberId}
    </select>

    <select id="reviewOnBook" parameterType="int">
        select b.*
        from board b join site_book sb
        on b.book_no = sb.book_no
        where b.book_no = #{bookNo}
        and b.board_category = 'review'
    </select>
</mapper>